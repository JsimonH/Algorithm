/*
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.
A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:
Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]

Example 2:
Input: digits = ""
Output: []

Example 3:
Input: digits = "2"
Output: ["a","b","c"]
*/

class Solution {
public:
    const string letters[10] = 
    {
        "", "", "abc", "def", "ghi",
        "jkl", "mno", "pqrs", "tuv", "wxyz"
    };

    vector<string> res;
    string s;
    void backtrack(const string& digits, int index)
    {
        if(index == digits.size())
        {
            res.push_back(s);
            return;
        }
        int digit = digits[index] - '0';   //将index指向的数字转为int
        string str = letters[digit];       //拿到数字对应的几个字母
        for (int i = 0; i < str.size(); i++) 
        {
            s.push_back(str[i]);
            backtrack(digits, index + 1);
            s.pop_back();   //回溯
        }
    }

    vector<string> letterCombinations(string digits) {
        if(digits.size() == 0)
        {
            return res;
        }
        backtrack(digits, 0);
        return res;
    }
};
